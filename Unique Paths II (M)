PROBLEM: https://leetcode.com/problems/unique-paths-ii/


SOLUTION:

___________________________Method-1________________________________

int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();        
        int t[m][n];
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(obstacleGrid[i][j] == 1) t[i][j] = -1;
                else t[i][j] = obstacleGrid[i][j];
            }
        }
        
        if(t[m-1][n-1] == -1 || t[0][0] == -1) return 0;
        
        for(int i=0; i<m; i++){
            if(t[i][0] == -1) break;
            t[i][0] = 1;
        }
        for(int j=0; j<n; j++){
            if(t[0][j] == -1) break;
            t[0][j] = 1;
        }
        
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                if(t[i][j] == 0){
                    if(t[i-1][j] == -1 && t[i][j-1] != -1) t[i][j] = t[i][j-1];
                    if(t[i-1][j] != -1 && t[i][j-1] == -1) t[i][j] = t[i-1][j];
                    if(t[i-1][j] != -1 && t[i][j-1] != -1) t[i][j] = t[i-1][j] + t[i][j-1];
                }
            }
        }
        
        return t[m-1][n-1];
}



__________________________Method-2_______________________________

int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();        
        int t[m][n];
        
        memset(t, 0, sizeof(t));
        
        for(int i=0; i<m; i++){
            if(obstacleGrid[i][0] == 1) break;
            t[i][0] = 1;
        }
        for(int j=0; j<n; j++){
            if(obstacleGrid[0][j] == 1) break;
            t[0][j] = 1;
        }
        
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                if(obstacleGrid[i][j] != 1)
                    t[i][j] = t[i-1][j] + t[i][j-1];
            }
        }
        
        return t[m-1][n-1];
}




